<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

<!-- 객체의 생성과 조립 -->
<!-- id="" : 객체 이름(맨 앞은 소문자로) >> Web >> url 경로 -->
<!-- 
1. Tomcat 실행
2. 클라이언트 요청 hello.do 나 intro.do 등등 ...
3. Spring 에서 <url-pattern>*.do</url-pattern> 설정에 따라서 (web.xml 에서 설정함)
3.1 DispatcherServlet 객체 생성 >> *KEY* Spring이 DispatcherServletr 가 가지고 놀 수 있는 IOC Container가 자동 생성
3.2 spring-servlet.xml read 해서 >> IOC 컨테이너 안에 >> bean 객체를 생성하고 조립
3.3 약속: (*-servlet.xml) 이라는 규칙으로 (본 예제의 경우 spring-servlet.xml 파일) 
	>> web.xml 파일에서 servlet 이름을 spring으로 지정했음 : <servlet-name>spring</servlet-name>
4. 컨테이너 안에 객체가 생성되고 주입이 되어 있어요
5. 요청한 hello.do에 대해서 mapping 작업 >> 실행할 객체 찾아요 >> <bean id="/hello.do" class="kr.or.kosa.HelloController"></bean> : id가 /hello.do 인 객체 찾았다
		>> 그 bean 의 객체 class="kr.or.kosa.HelloController" 호출 하고, HelloController 의 handleRequest 함수 자동 실행 


6. handleRequest return >> ModelAndView 객체 >> vViewResolver 조합 >> view 리턴...
 -->

<!-- 공통 bean -->
<context:annotation-config />
	<bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/views/</value>
		</property>
		
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>
	
<!-- TEST_1 -->
	<bean id="helloController" class="com.controller.HelloController"></bean>

<!-- TEST_2 -->
<!-- 
하나의 요청 주소를 전송방식으로 구분 >> GET, POST
화면, 서비스 처리 나누기
 -->
 <bean class="com.controller.NewArticleController"></bean>
 <bean class="com.service.ArticleService"></bean>
 
 <!-- TEST_3 -->
 <bean class="com.controller.OrderController"></bean>
 
  <!-- TEST_4 -->
 <bean class="com.controller.SearchController"></bean>
 
   <!-- TEST_5 -->
 <bean class="com.controller.CookieController"></bean>
 
 <!-- TEST_6 -->

 <!--  
import org.springframework.web.multipart.commons.CommonsMultipartResolver;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

CommonsMultipartFile 사용해서  업로드를 할려면 몇가지 기본 세팅
CommonsMultipartResolver  : 업로드한 파일에 대한 정보 관리(크기 , 이름....)

파일 처리 (의존 객체)

D:\bit2021\Spring\Class_Utils\Framework\spring-framework-3.0.2.RELEASE-dependencies
\org.apache.commons

com.springsource.org.apache.commons.fileupload-1.2.0.jar
com.springsource.org.apache.commons.io-1.4.0.jar

CommonsMultipartResolver  : 업로드한 파일에 정보 관리(크기 , 이름  , 중복이름 정책)
-->
<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- org.springframework.web.multipart.commons.CommonsMultipartResolver 이거를 찾는 id는 "multipartResolver" 로 정해져 있음. 오타 주의  -->
	<property name="maxUploadSize" value="10485760"></property>
	<property name="defaultEncoding" value="UTF-8"></property>
</bean>
	 <bean class="com.controller.ImageController"></bean>

<!--
<property name="uploadTempDir" value="uploadTempDir"/>
<bean id="uploadTempDir" class="org.springframework.core.io.FileSystemResource">
<constructor-arg value="c:/temp/"/>
</bean>
-->


</beans>