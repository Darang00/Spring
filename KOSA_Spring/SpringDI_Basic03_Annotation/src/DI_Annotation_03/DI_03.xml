<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
<!--
객체의 생성과 조립(주입)

spring 은 자신만의 컨테이너를 제공 (spring 전용 메모리 공간) 안에
xml 또는 annotation를 통해서 객체를 생성하고 조립하는 과정을 수행 (객체간의 관계 설정)

컨테이너 안에 생성돤 객체를 불러서 .... getbean() 함수

:IOC 컨테이너 (제어의 역전)
내가 주도했던 코드에서 Spring 이 주체 .....
:작은 단위의 부품을 만들고 놓고 그 것을 조립하는 행위 (레고블럭)
		MonitorViewer viewer = new MonitorViewer();
		Recorder recorder = new Recorder();
		viewer.setRecorder(recorder);
 - 개발자가 주도적으로 객체 만들지 않는다.

-->

 <!-- 
	<bean id="recorder" class="DI_Annotation_01.Recorder"></bean>
	<bean id="monitorViewer" class="DI_Annotation_01.MonitorViewer">
		<property name="recorder">
			<ref bean="recorder" />
		</property>
	
	</bean> -->
<!-- property 태그 쓰면 set 함수 찾아감 -->	
	 
	<!-- 
	@Autowired > Type기반
	목적 : 의존관계를 자동설정할 때 사용하며 [타입을 이용]하여 의존하는 객체를 삽입해 준다. 
	그러므로 (IOC Container) 해당 타입의 빈객체가 존재하지 않거나 또는 2개 이상 존재할 경우 
	스프링은 예외를 발생시키게 된다.
	
	new org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor
	설정 위치 : 생성자, 필드, 메소드(굳이 setter메소드가 아니여도 된다)
	*추가설정 : AutowiredAnnotationBeanPostProcessor 클래스를 빈으로 등록시켜줘야 한다. 
	해당 설정 대신에 <context:annotation-config> 태그를 사용해도 된다.
	<bean id="" class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"></bean>
	
	<context:annotation-config>
	**Annotation 사용에 필요한 모든 클래스를 한방에 객체로 만들어서 컨테이너에 올려 주는 역할
	** 장점: 각각의 Annotation을 사용 시 별도의 bean 객체를 설명할 필요 없다
	** 단점: 사용하지 않는 bean 객체도 자동 생성된다.
	
	java.lang.NoClassDefFoundError: org/springframework/aop/TargetSource
	작업을 위해서는 aop 기능이 필요하다
	
	@Aurowired 정상 동작 하지 않는 경우
	1. injection 되는 타입 객체가 (bean) IOC 컨테이너 안에 없는 경우
	
	2. IOC 컨테이너 안에 같은 타입의 객체가 여러 개 존재하는 경우
	 <bean id="a" class="DI_Annotation_01.Recorder"></bean>
	 <bean id="b" class="DI_Annotation_01.Recorder"></bean>
	 <bean id="c" class="DI_Annotation_01.Recorder"></bean>
	 
	3. IOC 컨테이너 안에 같은 타입의 객체 여러개 존재하더라도
		bean 객체의 id 값이 setter 함수의 parameter 명과 동일하면 자동 주입 성공
		
		반대: @Resource (by name)
		
		
		
2.*********************
@Qualifier
목적 : @Autowired의 목적에서 동일 타입의 빈객체가 존재시 특정빈을 삽입할 수 있게 설정한다. 
설정위치 : @Autowired 어노테이션과 함께 사용된다.
추가설정 : 동일타입의 빈객체 설정에서 <qualifier value="[alias명]" />를 추가하여 준다.
옵션 : name - alias명



4. ***************************** 
@Resource
목적 : 어플리케이션에서 필요로 하는 자원을 자동 연결(의존하는 빈 객체 전달)할 때 사용
       @Autowired 와 같은 기능을 하며 
       @Autowired와 차이점은 
       @Autowired는 타입으로(by type),  
       @Resource는 이름으로(by name)으로 연결시켜준다는 것이다.
설정위치 : 프로퍼티, setter메소드
추가설정 : CommonAnnotationBeanPostProcessor 클래스를 빈으로 등록시켜줘야 한다. 
해당 설정 대신에 <context:annotation-config> 태그를 사용해도 된다.
옵션 : name 
	
	 -->
 	 <context:annotation-config />
	
	 <bean id="monitorViewer" class="DI_Annotation_03.MonitorViewer"></bean>
	 <!-- bean 안에 id는 유일한 이름이어야 함. 다른 데서 똑같은 id 값 쓸 수 없다  -->
	 
	 <bean id="xx" class="DI_Annotation_03.Recorder"></bean>
	 <bean id="yy" class="DI_Annotation_03.Recorder"></bean>
	 <bean id="ㅋㅋ" class="DI_Annotation_03.Recorder"></bean>
	

</beans>