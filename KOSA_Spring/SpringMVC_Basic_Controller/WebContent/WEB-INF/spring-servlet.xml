<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

<!-- 객체의 생성과 조립 -->
<!-- id="" : 객체 이름(맨 앞은 소문자로) >> Web >> url 경로 -->
<!-- 
1. Tomcat 실행
2. 클라이언트 요청 hello.do 나 intro.do 등등 ...
3. Spring 에서 <url-pattern>*.do</url-pattern> 설정에 따라서 (web.xml 에서 설정함)
3.1 DispatcherServlet 객체 생성 >> *KEY* Spring이 DispatcherServletr 가 가지고 놀 수 있는 IOC Container가 자동 생성
3.2 spring-servlet.xml read 해서 >> IOC 컨테이너 안에 >> bean 객체를 생성하고 조립
3.3 약속: (*-servlet.xml) 이라는 규칙으로 (본 예제의 경우 spring-servlet.xml 파일) 
	>> web.xml 파일에서 servlet 이름을 spring으로 지정했음 : <servlet-name>spring</servlet-name>
4. 컨테이너 안에 객체가 생성되고 주입이 되어 있어요
5. 요청한 hello.do에 대해서 mapping 작업 >> 실행할 객체 찾아요 >> <bean id="/hello.do" class="kr.or.kosa.HelloController"></bean> : id가 /hello.do 인 객체 찾았다
		>> 그 bean 의 객체 class="kr.or.kosa.HelloController" 호출 하고, HelloController 의 handleRequest 함수 자동 실행 


6. handleRequest return >> ModelAndView 객체 >> vViewResolver 조합 >> view 리턴...
 -->



	<bean id="/hello.do" class="kr.or.kosa.HelloController"></bean>
	<bean id="/intro.do" class="kr.or.kosa.IntroController"></bean>
	
	<bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/views/</value>
		</property>
		
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>

</beans>